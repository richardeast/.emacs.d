#+TITLE: Emacs Configuration
#+AUTHOR: Richard East

Configuration *heavily* inspired by [[https://github.com/danielmai/.emacs.d][Daniel Mai's Emacs Configuration]] and is a [[https://en.wikipedia.org/wiki/Literate_programming][Literate programming]] implementation of additional per-user Emacs-specific files.
See [[https://www.youtube.com/watch?v=VIuOwIBL-ZU][Overview of Init Files Using Org-Mode and Use-Package]] presentation.

* Prerequisites
Items best served at the top of the config file.

** The init.el
[[file:init.el][init.el]] should be as small as possible, so all configuration can be stored and documented here.
The init.el turns this config.org into a config.el, which is loaded on start up.
#+begin_src emacs-lisp
;; IMPORTANT: config.el - do not directly edit this file. 
;; config.el is generated by init.el from config.org. Edit config.org instead!
#+end_src

** use-package
This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is a way to manage package configurations.
YouTube presentation - [[https://www.youtube.com/watch?v=2TSKxxYEbII][Emacs package highlight: use-package]].
#+begin_src emacs-lisp
;;; Bootstrap use-package
;; Install use-package if it's not already installed.
;; use-package is used to configure the rest of the packages.
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+end_src

** Generated Customize settings
Emacs generates code when it asks a user to save a state for later use.
To separate generated code from this config and the [[file:init.el][init.el]], put autogenerated code in its own separate file.
This will keep [[file:init.el][init.el]] small, clean and portable.
The contents of [[file:custom.el][custom.el]] are generated by emacs. Do not edit it by hand. Do not delete it. If starting afresh, custom.el is still required in .emacs.d
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

** Backups
Put backups in their own folder. This keeps the root of .emacs.d cleaner.
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

** Character encoding
Use [[https://en.wikipedia.org/wiki/UTF-8][UTF-8]]
#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src

* Control the GUI and sound elements
Including:
 - menu-bar (a drop down menu)
 - tool-bar (icons)
 - scrollbar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
;;(scroll-bar-mode -1)

;; Stop beeping! (Was irritating when hitting C-g)
(setq visible-bell t)
#+END_SRC

* Set up startup-screen
Remove the initial start up message, with the Emacs Logo.
#+BEGIN_SRC emacs-lisp
;;(setq initial-scratch-message "")
(setq inhibit-startup-message t)
(setq inhibit-splash-screen t)
#+END_SRC

* General Settings / "Sane defaults" / Opinions
#+BEGIN_SRC emacs-lisp
;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)
#+END_SRC
* Themes
Custom themes are collections of settings that can be enabled or disabled as a unit. You can use Custom themes to switch easily between various collections of settings, and to transfer such collections from one computer to another.

A Custom theme is stored as an Emacs Lisp source file. If the name of the Custom theme is name, the theme file is named name-theme.el. See [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Creating-Custom-Themes.html][Creating Custom Themes]], for the format of a theme file and how to make one.
** Set the location for the themes
This is a folder where all themes can be stored.
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+END_SRC

** Cyberpunk theme
The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] 
#+begin_src emacs-lisp
(use-package cyberpunk-theme
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)))
#+end_src

** Solarized theme
Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

#+begin_src emacs-lisp
(use-package solarized-theme
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+end_src

** Monokai theme
The [[https://github.com/oneKelvinSmith/monokai-emacs][Monokai theme]] is s a port of the popular TextMate theme [[http://www.monokai.nl/blog/2006/07/15/textmate-color-theme/][Monokai]] by Wimer Hazenberg. The inspiration for the theme came from Bozhidar Batsov and his [[https://github.com/bbatsov/zenburn-emacs][Zenburn]] port and [[http://www.sublimetext.com/2][Sublime Text 2]] which defaults to this color scheme.
#+begin_src emacs-lisp
(setq monokai-use-variable-pitch nil)
#+end_src
