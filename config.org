#+TITLE: Emacs Configuration
#+AUTHOR: Richard East

#+TODO: TODO(t) ON-TRIAL | DONE(d) CANCELED(c) NOTE(n)

Configuration *heavily* inspired by [[https://github.com/danielmai/.emacs.d][Daniel Mai's Emacs Configuration]] and is a [[https://en.wikipedia.org/wiki/Literate_programming][Literate programming]] implimentation of additional per-user Emacs-specific files.
See [[https://www.youtube.com/watch?v=VIuOwIBL-ZU][Overview of Init Files Using Org-Mode and Use-Package]] presentation.

See [[Troubleshooting]] when things don't work!
+Tested+ tried in OSes: Windows 7 only :(

* Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Richard East"
;;      user-mail-address "richard@"
)
#+END_SRC
* Prerequisites
Items best served at the top of the config file.
** The init.el
[[file:init.el][init.el]] should be as small as possible, so all configuration can be stored and documented here.
The init.el turns this config.org into a config.el, which is loaded on start up.
#+begin_src emacs-lisp
;; IMPORTANT: config.el - do not directly edit this file. 
;; config.el is generated by init.el from config.org. Edit config.org instead!
#+end_src

** use-package
This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is a way to manage package configurations.
YouTube presentation - [[https://www.youtube.com/watch?v=2TSKxxYEbII][Emacs package highlight: use-package]].
#+begin_src emacs-lisp
;;; Bootstrap use-package
;; Install use-package if it's not already installed.
;; use-package is used to configure the rest of the packages.
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+end_src

** Generated Customize settings
Emacs generates code when it asks a user to save a state for later use.
To separate generated code from this config and the [[file:init.el][init.el]], put auto-generated code in its own separate file.
This will keep [[file:init.el][init.el]] small, clean and portable.
The contents of [[file:custom.el][custom.el]] are generated by emacs. Do not edit it by hand. Do not delete it. If starting afresh, custom.el is still required in .emacs.d
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

** Backups
Put backups in their own folder. This keeps the root of .emacs.d cleaner.
By default, Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists.
The following code stashes them all in ~/.emacs.d/backups, where they can be found with C-x C-f (find-file) if needed.
As disk space is cheap, save often.
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src
** History
From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
       search-ring
        regexp-search-ring))
#+END_SRC

** Character encoding
Use [[https://en.wikipedia.org/wiki/UTF-8][UTF-8]]
#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src

* Control the GUI and sound elements
Including:
 - menu-bar (a drop down menu)
 - tool-bar (icons)
 - scrollbar
#+BEGIN_SRC emacs-lisp
(when window-system
;;  (tooltip-mode -1)
;;  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode 1))

;; Stop beeping! (Was irritating when hitting C-g)
(setq visible-bell t)
#+END_SRC

** TODO scroll-bar-mode seems to kill visiblity of the minibuffer commands, such as C-x and M-x :WindowsOS:
* Set up startup-screen
Remove the initial start up message, with the Emacs Logo.
TODO - can something useful be done here?
#+BEGIN_SRC emacs-lisp
;;(setq initial-scratch-message "")
(setq inhibit-startup-message t)
(setq inhibit-splash-screen t)
#+END_SRC

* General Settings / "Sane defaults" / Opinions

** Sentences end with a single space
Traditionally emacs sentences end with a double space.
Don't count two spaces after a period as the end of a sentence, when just one space is needed.
This makes sentence navigation commands work with one space.
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** TODO Winner mode - undo and redo window configuration
#+BEGIN_SRC emacs-lisp
;;(use-package winner
;;  :ensure t
;;  :defer t
;;  :idle (winner-mode 1))
#+END_SRC

** Move between windows
From [[https://www.masteringemacs.org][Mastering Emacs]] - "[...] to move between windows use the command C-x o.
I find it useful to rebind it to M-o as it's such a common thing
to do. Add this to your init file:"

It has been known to stop arrow keys working under x-term
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
#+END_SRC

* Themes
Custom themes are collections of settings that can be enabled or disabled as a unit. You can use Custom themes to switch easily between various collections of settings, and to transfer such collections from one computer to another.

A Custom theme is stored as an Emacs Lisp source file. If the name of the Custom theme is name, the theme file is named name-theme.el. See [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Creating-Custom-Themes.html][Creating Custom Themes]], for the format of a theme file and how to make one.
** Set the location for the themes
This is a folder where all themes can be stored.
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+END_SRC

** Cyberpunk theme
The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful. However, I don't like the
boxes around the mode line.

#+begin_src emacs-lisp
(use-package cyberpunk-theme
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)
;;    (set-face-attribute `mode-line nil
;;                       :box nil)
;;    (set-face-attribute `mode-line-inactive nil
;;                        :box nil)
))
#+end_src

** Solarized theme
Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

#+begin_src emacs-lisp
(use-package solarized-theme
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+end_src
** Monokai theme
The [[https://github.com/oneKelvinSmith/monokai-emacs][Monokai theme]] is s a port of the popular TextMate theme [[http://www.monokai.nl/blog/2006/07/15/textmate-color-theme/][Monokai]] by Wimer Hazenberg. The inspiration for the theme came from Bozhidar Batsov and his [[https://github.com/bbatsov/zenburn-emacs][Zenburn]] port and [[http://www.sublimetext.com/2][Sublime Text 2]] which defaults to this color scheme.
#+begin_src emacs-lisp
(setq monokai-use-variable-pitch nil)
#+end_src

** TODO Select Theme per mode
** Create own theme
* Spelling
** Flyspell							  :WindowsOS:
*** TODO Aspell Install instructions
Instructions are patchy on-line.
Note: These are the Windows settings on my Window 7 box. YMMV
#+BEGIN_SRC emacs-lisp
(add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/")
(setq ispell-program-name "aspell")
(setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
#+END_SRC

* Source Control
** Magit
[[http://magit.vc/about.html][Magit]] is an interface to the [[https://en.wikipedia.org/wiki/Version_control][version control system]] [[http://git-scm.com/][Git]].
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+END_SRC

* Programming
** paredit
** Clojure
*** Clojure
[[http://clojure.org/][Clojure]] is a general-purpose programming language with an emphasis on functional programming and is a dialect of the Lisp.
It runs on the Java Virtual Machine, [[https://github.com/clojure/clojurescript][JavaScript]] and Common Language Runtime engines. Clojure treats code as data and has a macro system. 
#+begin_src emacs-lisp
(use-package clojure-mode
  :ensure t)
#+end_src

*** TODO flycheck-clojure

*** TODO Open and evaluate 4clojure questions
[[https://melpa.org/#/4clojure][Open and evaluate 4clojure.com questions]]
*** CIDER
[[https://github.com/clojure-emacs/cider][CIDER]], formerly nrepl.el, is the *C.lojure I.nteractive D.evelopment E.nvironment* that *R.ocks* for Emacs! It's built on top of nREPL, the Clojure networked REPL server. 
CIDER is a great alternative to the now deprecated combination of SLIME + swank-clojure.

CIDER's history and architecture: [[https://www.youtube.com/watch?v=4X-1fJm25Ww][The Evolution of the Emacs tooling for Clojure]].
If you like the project, [[https://github.com/clojure-emacs/cider#donations][support its ongoing development]].

Gitter
Some features:
 - Powerful REPL
 - Interactive code evaluation
 - Code completion
 - Compilation notes (error and warning highlighting)
 - Human-friendly stacktraces
 - Smart code completion
 - Definition lookup
 - Documentation lookup
 - Resource lookup
 - Apropos
 - Debugger
 - Value inspector
 - Function tracing
 - Interactive macroexpansion
 - [[http://conj.io/][Grimoire]] integration
 - clojure.test integration
 - Classpath browser
 - Namespace browser
 - nREPL session management
 - Scratchpad
 - Minibuffer code evaluation
 - Integration with company-mode and auto-complete-mode
 
TODO - Change commented out code.

#+begin_src emacs-lisp
(use-package cider
  :ensure t)

;; Cider settings - see https://github.com/clojure-emacs/cider
;; (setq cider-prompt-save-file-on-load nil)

#+end_src
** TODO Java
** TODO JavaScript
** TODO XSLT
** TODO HTML
** TODO Ruby
** TODO ColdFusion
* To try
** ON-TRIAL NeoTree
http://www.emacswiki.org/emacs/NeoTree
https://github.com/jaypei/emacs-neotree

NeoTree is just a navigation view, similar to Eclipse's nav
It's useful for viewing folder structure of a project.
It's probable slower finding and opening files than Ido mode.
Use Dired for editing/renaming/deleting files.

Useful Keys
| Key | Action                         |
|-----+--------------------------------|
| F8  | Toggle NeoTree                 |
| H   | Show hidden files, directories |
|     |                                |



TODO figure out how to have own theme.
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :bind ([f8] . neotree-toggle)
  :config
  (progn
    (setq neo-theme 'arrow)) ; 'classic, 'nerd, 'ascii, 'arrow
)
#+END_SRC
** ON-TRIAL Helm
**** http://tuhdo.github.io/helm-intro.html
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ("C-x C-b" . helm-buffers-list)
         ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-x c o" . helm-occur)
         ("C-x c s" . helm-swoop)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c b" . my/helm-do-grep-book-notes)
         ("C-x c SPC" . helm-all-mark-rings)))
#+END_SRC
** ON-TRIAL Auto-Complete
http://emacswiki.org/emacs/AutoComplete
http://emacs-fu.blogspot.co.uk/2010/10/auto-complete-mode.html
https://github.com/krobertson/emacs.d/blob/master/packages.el

#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :diminish auto-complete-mode
  :config
  (progn
    (use-package go-autocomplete)
    (add-to-list 'ac-dictionary-directories (emacs-d "ac-dict")))
)
#+END_SRC

** TODO HTML Mode/ HTMLModeDeluxe / Emacs WebDev Environment
[[http://www.emacswiki.org/cgi-bin/wiki/HtmlModeDeluxe][HTMLModeDeluxe]]
[[http://www.dzr-web.com/people/darren/projects/emacs-webdev][Emacs WebDev Environment]]
[[http://www.nongnu.org/baol-hth][HTML Helper Mode]]
** TODO XML
** TODO SQL
M-x sql-ms
** TODO JSON

** TODO IDO
[[https://www.masteringemacs.org/article/introduction-to-ido-mode][Introduction to Ido Mode]]
** TODO Projectile
[[http://wikemacs.org/wiki/Projectile][Projectile]] is  project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies.
Projectile - works with Lein projects
**** TODO Squiggly-clojure - Flycheck checker for Clojure
**** TODO Slamhound 
**** TODO Eastwood (a Clojure lint)
** TODO Code folding
[[https://github.com/mrkkrp/vimish-fold/][vimish-fold]] fancier than [[http://www.emacswiki.org/emacs/HideShow][Hide/Show]]

** TODO folds
** TODO Minimap
** TODO Spacemacs
** TODO [[http://www.emacswiki.org/emacs/MiniMap][MiniMap]]
Minimap is a feature provided by the Sublime editor. It shows a smaller, "minibar" display of the current buffer alongside
the main editing window. In the minibar window, it highlights the portion of the buffer that is currently visible
in the main window. This highlight position is updated automatically, as you navigate in the main window. You can
scroll the main window by dragging the highlighted area in the minibar.
You can configure the size/readability of the sidebar freely by specifying the font familiy and height.
** TODO Org-mode and Confluence integration
** TODO Jira
** TODO [[http://www.gnu.org/software/emacs/manual/html_node/speedbar/][Speedbar]] -
It's an older alternative to neotree
Speedbar is a program for Emacs which can be used to summarize information related to the current buffer.
Its original inspiration is the 'explorer' often used in modern development environments, office packages, and web browsers.
** TODO Yet another Snippet
[[https://www.youtube.com/watch?v=YLKZ4GehTcE&t=6m][used with Clojure code]]
* Org Mode Settings
** Spelling
enabled Flyspell-mode by default whenever in org-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell)
#+END_SRC
* <<Troubleshooting>>
** If there is an error on start up, try "M-x package-refresh-contents" and restart
** Remove OS specific code. (Search through the tags.)
** TODO 
